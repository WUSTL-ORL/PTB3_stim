function dostimretinotopy_131212(systype,repnum,stimtype,matrix_type,filename)% This function can perform all the phase-encoded retinotopic stimuli:% counter-clockwise and clockwise rotating wedges and expanding and% contracting rings. Every stimulus will complete a full rotation in 36% seconds (1 second per position for the wedges and 2 seconds per position% for the rings). At every position, the checkboard stimulus will flicker% at 8 Hz.  There is also 1 initial fixation (resting) period and 2 final% fixation periods.  The overall sequence is therefore: initial fixation% (duration controlled by Tinit in code), main part of run, first final% fixation (duration controlled by Tff in code), second final fixation% (duration controlled by Tff in code).  Recommended values for Tinit and% Tff are 30 and 5, respectively (both in seconds).%% The syntax is:%% dostimretinotopy_131212(systype,repnum,stimtype,matrix_type,filename)%% systype is the name of your system (it will usually be 'DOT'). This% references a file with information about where to put the stimuli on the% screen. stimtype is one of the stimulus types: CCW, CW, IN, or OUT.% repnum is the number of repetitions (i.e., complete stimulus rotation% cycles). filename is optional; if included, dostimretinotopy will export% two files (suffixes -steps.txt and -times.txt) with information about the% stimulus protocol design (a steps file, derived from the steps data% structure array) and when each event happened (a stimulus time file).%% %%% Additional Help %%%%% First Input: systype% 'DOT' Normal DOT operation%% Second Input: repnum% Choose number of rotations to do%% Third Input: stimtype% Choose retinotopy paradigm: 'CCW', 'CW', 'IN', or 'OUT'%% Fourth Input: matrix_type% Choose matrix_type: 'stim_wedge' (in case of CCW and CW for current% retinotopy) or 'stim_ring' (in case of IN and OUT for current% retinotopy) or any other matrix can be loaded to be presented.%% Fifth Input (optional): filename (a text string)% Text files with stimulus design and timing information will be outputted% if filename is specified as an input.  They will be named% filename-steps.txt and filename-times.txt; for example, if filename is% 'fcDOT_test', then these files will be named fcDOT_test-steps.txt and% fcDOT_test-times.txt.%%% IMPORTANT!% TO BREAK THE PROGRAM WHILE RUNNING:% PRESS 'ALT-TAB' TO SELECT THE MATLAB CONTROL/COMMAND WINDOW% FOLLOWED BY 'CTRL-C'.%%% Set Parameters based on systype and designsynchF=20;  % Synch pulse F frequency.synchA=25;  % Synch pulse A frequency.Tff=5;  % Final fixation time in seconds.  There will be 2 of these blocks.switch stimtype    case {'CCW','CW'}        N=36; % Number of Grid Positions        T=1; % Time Per Position (sec)        hz=8;  % Flicker frequency (Hz).    case{'OUT','IN'}        N=18;        T=2;        hz=8;    otherwise        error('** Unknown stimulus type **')endload(matrix_type)  % Loads a .mat file that contains a structure called "stim" that contains the stimulus images.% Direction to loop through stimuliswitch stimtype    case {'CCW','OUT'}        d=1;    case{'CW','IN'}        d=-1;endswitch systype    case 'DOT'        blanktime=5;    otherwise        error('** Unknown system type **')end% Number of things stimulus will doswitch systype    case 'DOT'        numsteps=repnum*N+2; % total reps + initial fixation + final fixation        Tinit=30;  % Initial fixation time in seconds.end%%initialize PsychSound and close open sound devicesInitializePsychSound;c=PsychPortAudio('GetOpenDeviceCount');if c~=0    PsychPortAudio('Close')end%% Construct Stimulus Protocol% Create a struct array called "steps" that contains all the information% about the stimulus.  This structure has the following fields:% - "stim" is the stimulus to present: for flickering, just list number or% name, not both flicker parities.% - "command" is what to do with the stimulus: 'flicker' or 'hold'.% - "time" is how long to do it: +number is a time in seconds, -number is a% time in TTL pulses.% - "hz" (only for flicker): flicker rate.steps(numsteps)=struct('stim',[],'command',[],'time',[],'hz',[],'synch',[],'display',[]);switch systype    case 'DOT'        % Intial Fixation        cstep=1; % Current Step of Stimulus        steps(cstep).stim='blank';        steps(cstep).command='hold';        steps(cstep).time=Tinit;        steps(cstep).hz=0;        steps(cstep).synch=synchF;        steps(cstep).display='Initial Fixation';        % Main Stimulus Presentation Loop        for r=1:repnum            loopnum=0;            nn=1;            while loopnum<N                cstep=cstep+1;                steps(cstep).stim=['stim',num2str(nn)];                steps(cstep).command='flicker';                steps(cstep).time=T;                steps(cstep).hz=hz;                steps(cstep).display=['Cycle: ',num2str(r),', Position: ',num2str(nn)];                if nn==1                    steps(cstep).synch=synchA;                else                    steps(cstep).synch=0;                end                nn=nn+d; if nn<=0; nn=nn+N; end                loopnum=loopnum+1;            end        end        % Final Fixation        cstep=cstep+1;        steps(cstep).stim='blank';        steps(cstep).command='hold';        steps(cstep).time=Tff;        steps(cstep).hz=0;        steps(cstep).synch=synchF;        steps(cstep).display='Final Fixation';        % Final Pulse        cstep=cstep+1;        steps(cstep).stim='blank';        steps(cstep).command='hold';        steps(cstep).time=Tff;        steps(cstep).hz=0;        steps(cstep).synch=synchF;        steps(cstep).display='Final Pulse';        end%% Output text file of stimulus designif exist('filename','var')    stimfile(steps,[filename,'-steps.txt'])end%% Perform Stimulusswitch systype    case 'DOT'        Rush('time=dostim2(systype,stim,steps);',1);        if exist('filename','var')            timefile(time,[filename,'-times.txt'])        endend